Idea:
    Hex viewer - programm for print represented byte's from file as hexadecimal in stdout
    Read given file's or stdin and print it content converted to hex to stdout


Byte representation [HEX BYTES] :
    byte's writed as 2 symbol's (ex: "0F") in upper or lower case
    Lower case for default (change by flag --upper-byte)
    C-type for default ( change by flag --byte-format ...)
    Output type's: 
        C-type (ex: "0f")
        Python-type (ex: "\x0f")
        (Can be added any pre-/post-fix)

Row format [ROW] :
    [ADDRESS] [HEX BYTES] [DECODED BYTES]

    ADDRESS:
        For default: have 4 symbol's (ex: "0010") and ':' at end. Count of symbols can be changed by cmd flags (--address-len ...)

    HEX BYTES:
        For default: 16 byte's in choosen format per row separated with ' ' symbol. Count and delimited can be changed by cmd flags (--bytes-len ...) (--bytes-delimiter ...)

    DECODED BYTES:
        For default: 16 symbol's per row without any delimiter
        If byte can't be decoded to printable char, it will be replaced with '.' symbol. Symbol for replace can be changed by cmd flags (--non-decode ...)

Page format:
    [OFFSETS HEADER] '\n' [ROW]

    OFFSETS HEADER:
        Number's in hexadecimal default format (apply only 'bytes-count-per-row' and case) from 0 to 'bytes-count-per-row'
        May be printed once at begin or print every N row's. Count of row's can be changed by cmd flags (--header-every ...)
    
    For interactive mode:
        [CHUNK] - n count of row's which can be printed on screen
                  chunk start at X byte in file from start


Additional modules:
    Wrap for string's
        - Write to given string with realloc if need


Setting's and flags:
[BYTE]
- Lower case for default (--upper-byte)
- Byte C-type for default (--byte-type ...)

[ROW]
- Digits count for address (--address-len ...) min: 1, max: uint8_t
- Hex or decimal for show address (--address-decimal) default: hex
- Count of bytes per row (--bytes-len ...) min: 1, max: uint8_t
- Separatrot for bytes in row (--bytes-delimiter ...)
- Not decoded symbol for byte (--non-decode ...)



[PAGE]
- Print header every n row's (--header-every ...) min: 1, max: uint32_t
